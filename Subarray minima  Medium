import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
        Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		long[] arr = new long[n];
		for(int i=0;i<n;i++){
			arr[i]=s.nextInt();
		}
		 System.out.println(sumSubarrayMins(arr, n));
	}
	static class pair
{
    long first, second;
    public pair(long first, long second)
    {
        this.first = first;
        this.second = second;
    }
}
static long sumSubarrayMins(long A[], int n)
{
    long []left = new long[n];
    long []right = new long[n];
 
    Stack<pair> s1 = new Stack<pair>();
    Stack<pair> s2 = new Stack<pair>();
     
    // getting number of element strictly larger
    // than A[i] on Left.
    for (int i = 0; i < n; ++i)
    {
        int cnt = 1;
 
        // get elements from stack until element
        // greater than A[i] found
        while (!s1.isEmpty() &&
               (s1.peek().first) > A[i])
        {
            cnt += s1.peek().second;
            s1.pop();
        }
 
        s1.push(new pair(A[i], cnt));
        left[i] = cnt;
    }
 
    // getting number of element larger
    // than A[i] on Right.
    for (int i = n - 1; i >= 0; --i)
    {
        int cnt = 1;
 
        // get elements from stack until element
        // greater or equal to A[i] found
        while (!s2.isEmpty() &&
               (s2.peek().first) >= A[i])
        {
            cnt += s2.peek().second;
            s2.pop();
        }
 
        s2.push(new pair(A[i], cnt));
        right[i] = cnt;
    }
 
    long result = 0;
 
    // calculating required resultult
    for (int i = 0; i < n; ++i)
        result = (result + A[i] * left[i] *
                                  right[i]);
 
    return result;
}
}
